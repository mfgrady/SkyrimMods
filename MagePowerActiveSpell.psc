ScriptName MagePowerActiveSpell extends ActiveMagicEffect
MagePowerQuestScript Property myMod Auto
DynamicCombat_Config Property mpoConfig Auto
Spell Property MagePowerExhaustion Auto
Perk Property MagePowerPerk Auto 
FormList Property fMagePowerObject Auto
EffectShader Property esMagePower Auto

ObjectReference oLevitationObject1
ObjectReference oLevitationObject2
Actor ActorRef

bool updateSecond = false
float defaultGravity = 1.35
bool zeroGravity = false  
    
int Normal = -1
int Defensive = 0
int Offensive = 1
int previousState
float sw1HBase = 0.0
float sw2HBase = 0.0
bool gatheringMomentum = false
float fBaseMoveSpeed
float fBaseJumpingBonus
float fBaseMagickaRate

Event OnPlayerLoadGame()
    int current_crc = FNIS_aa.GetInstallationCRC()
    if ( current_crc == 0 )
        ; Installation Error: no AA generated by FNIS
    elseif ( current_crc != myMod.myModCRC )
        myMod.myModID = FNIS_aa.GetAAModID("mpo", "MagePower", true)            ; true during test phase only
		myMod.my_mtidle_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._mtidle(), "MagePower", true)
		myMod.my_mt_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._mt(), "MagePower", true)
        myMod.my_mtx_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._mtx(), "MagePower", true)
		myMod.my_mtturn_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._mtturn(), "MagePower", true)
		myMod.my_magidle_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._magidle(), "MagePower", true)
        myMod.my_magmt_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._magmt(), "MagePower", true)
        myMod.my_magcastmt_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._magcastmt(), "MagePower", true)
        myMod.my_magatk_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._magatk(), "MagePower", true)
		myMod.my_sprint_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._sprint(), "MagePower", true)
		myMod.my_jump_base = FNIS_aa.GetGroupBaseValue(myMod.myModID, FNIS_aa._jump(), "MagePower", true)
        myMod.myModCRC = current_crc
        
    endif
endEvent


Event OnEffectStart(Actor akTarget, Actor akCaster)
	ActorRef = akTarget
	
	oLevitationObject1 = ActorRef.PlaceAtMe(fMagePowerObject.GetAt(0))	
	oLevitationObject2 = ActorRef.PlaceAtMe(fMagePowerObject.GetAt(0))
	
	ScaleUpMagePowerPerk(mpoConfig.MPChargeValue / 1000.0)
	ActorRef.AddPerk(MagePowerPerk)
	esMagePower.Play(ActorRef) 
	
	GotoState("Charging")
	 
	utility.SetIniFloat("fInAirFallingCharGravityMult:Havok",0.1)
	zeroGravity = true	
	RegisterForSingleUpdate(0.05)
endEvent

Event OnEffectFinish(Actor akTarget, Actor akCaster)    
	utility.SetIniFloat("fInAirFallingCharGravityMult:Havok",defaultGravity)
	zeroGravity = false
	oLevitationObject1.Delete()
	oLevitationObject2.Delete()
	
	ActorRef.RemovePerk(MagePowerPerk)		
	ScaleDownMagePowerPerk(mpoConfig.MPChargeValue / 1000.0)	
	RegisterForSingleUpdate(1)

	esMagePower.Stop(ActorRef)
	GoToState("Normal")
endEvent

Event OnDeath(Actor akKiller)
  utility.SetIniFloat("fInAirFallingCharGravityMult:Havok",defaultGravity)
endEvent

Event OnObjectEquipped(Form akBaseObject, ObjectReference akReference)
    Spell equippedSpellRight = ActorRef.GetEquippedSpell(1)
    Spell equippedSpellLeft = ActorRef.GetEquippedSpell(0)
    If equippedSpellRight == none || equippedSpellLeft == none
        Dispel()
    endIf
endEvent

Event OnCellLoad()
	oLevitationObject1 = ActorRef.PlaceAtMe(fMagePowerObject.GetAt(0))	
	oLevitationObject2 = ActorRef.PlaceAtMe(fMagePowerObject.GetAt(0))
endEvent

Function ScaleUpMagePowerPerk(float magnitude)
	int numEntries = MagePowerPerk.GetNumEntries()
	int index = 0
	
	While index < numEntries
		float entryValue = MagePowerPerk.GetNthEntryValue(index, 0)
		
		If entryValue > 1.0
			MagePowerPerk.SetNthEntryValue(index, 0, entryValue + magnitude)
		ElseIf entryValue > 0.0
			MagePowerPerk.SetNthEntryValue(index, 0, entryValue - magnitude)
		endIf
		index = index + 1
	endWhile
endFunction

Function ScaleDownMagePowerPerk(float magnitude)
	int numEntries = MagePowerPerk.GetNumEntries()
	int index = 0
	
	While index < numEntries
		float entryValue = MagePowerPerk.GetNthEntryValue(index, 0)
		
		If entryValue > 1.0
			MagePowerPerk.SetNthEntryValue(index, 0, entryValue - magnitude)
		ElseIf entryValue > 0.0
			MagePowerPerk.SetNthEntryValue(index, 0, entryValue + magnitude)
		endIf
		index = index + 1
	endWhile
endFunction

State Normal
    Event OnBeginState()
		ActorRef.SetActorValue("SpeedMult", fBaseMoveSpeed)
		ActorRef.ModActorValue("CarryWeight", 0.1)
		ActorRef.ModActorValue("CarryWeight", -0.1)
		ActorRef.SetActorValue("MagickaRate", fBaseMagickaRate)
		ActorRef.SetActorValue("JumpingBonus", fBaseJumpingBonus)
		
		FNIS_aa.SetAnimGroup(ActorRef, "_mtidle", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mt", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mtx", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mtturn", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_magmt", 0, 0, "MagePower", true)
        FNIS_aa.SetAnimGroup(ActorRef, "_magatk", 0, 0, "MagePower", true)
        FNIS_aa.SetAnimGroup(ActorRef, "_magcastmt", 0, 0, "MagePower", true)		
		FNIS_aa.SetAnimGroup(ActorRef, "_magcidle", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_sprint", 0, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_jump", 0, 0, "MagePower", true)
		
		If !ActorRef.HasSpell(MagePowerExhaustion)		
			MagePowerExhaustion.SetNthEffectDuration(0, ((mpoConfig.MPChargeValue / 25.0) As Int ) + 30)			
			ActorRef.AddSpell(MagePowerExhaustion,false)

		endIf
	EndEvent

endState

State Charging
	Event OnUpdate()
		if (oLevitationObject1.Is3DLoaded() && oLevitationObject2.Is3DLoaded())
			oLevitationObject1.SetMotionType(oLevitationObject1.Motion_Keyframed)
			oLevitationObject1.SetAngle(0,0,0)
			
			oLevitationObject2.SetMotionType(oLevitationObject1.Motion_Keyframed)
			oLevitationObject2.SetAngle(0,0,0)

			GotoState("Infused")
			RegisterForSingleUpdate(0.05)
		else
			RegisterForSingleUpdate(0.05)
		endif
	endEvent

endState

State Infused
    Event OnBeginState()	
		fBaseMoveSpeed = ActorRef.GetBaseActorValue("SpeedMult")
		fBaseMagickaRate = ActorRef.GetBaseActorValue("MagickaRate")
		
        ActorRef.SetActorValue("SpeedMult", fBaseMoveSpeed * 1.25)
		ActorRef.ModActorValue("CarryWeight", 0.1)
		ActorRef.ModActorValue("CarryWeight", -0.1)
		ActorRef.SetActorValue("MagickaRate", fBaseMagickaRate * 1.25)
		ActorRef.SetActorValue("JumpingBonus", fBaseJumpingBonus * 2.50)
		
		FNIS_aa.SetAnimGroup(ActorRef, "_mtidle", myMod.my_mtidle_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mt", myMod.my_mt_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mtx", myMod.my_mtx_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_mtturn", myMod.my_mtturn_base, 0, "MagePower", true)
        FNIS_aa.SetAnimGroup(ActorRef, "_magmt", myMod.my_magmt_base, 0, "MagePower", true)
        FNIS_aa.SetAnimGroup(ActorRef, "_magatk", myMod.my_magatk_base, 0, "MagePower", true)
        FNIS_aa.SetAnimGroup(ActorRef, "_magcastmt", myMod.my_magcastmt_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_magcidle", myMod.my_magidle_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_sprint", myMod.my_sprint_base, 0, "MagePower", true)
		FNIS_aa.SetAnimGroup(ActorRef, "_jump", myMod.my_jump_base, 0, "MagePower", true)
		
    EndEvent
 	
	Event OnUpdate()
		float Direction = ActorRef.GetAngleZ()
		float elevation = ActorRef.GetAngleX()

		; Make sure that elevation isn't to high
		if elevation < -30
			elevation = -30
		elseif elevation > 40
			elevation = 40
		endif
		
		; Enable gravity if we look down.
		if elevation > 20
			if zeroGravity
				utility.SetIniFloat("fInAirFallingCharGravityMult:Havok",defaultGravity)
				zeroGravity = false
		;		debug.notification("Normal G")
			endif
		elseif !zeroGravity
			utility.SetIniFloat("fInAirFallingCharGravityMult:Havok",0.1)
			zeroGravity = true
		;	debug.notification("Zero G")
		endif
	
		if (updateSecond)
			if (ActorRef.GetDistance(oLevitationObject1) > 70)
				oLevitationObject1.SetAngle(Math.cos(direction)*elevation, -math.sin(direction)*elevation, Direction)
				oLevitationObject1.SetPosition (ActorRef.X, ActorRef.y, (ActorRef.z))
				updateSecond = !updateSecond
			endif
		else
			if (ActorRef.GetDistance(oLevitationObject1) > 70)
				oLevitationObject2.SetAngle(Math.cos(direction)*elevation, -math.sin(direction)*elevation, Direction)
				oLevitationObject2.SetPosition (ActorRef.X, ActorRef.y, (ActorRef.z))
				updateSecond = !updateSecond
			endif
		endif
		RegisterForSingleUpdate(0.00)
	EndEvent
   
endState

